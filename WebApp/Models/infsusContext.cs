// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebApp.Models;

public partial class infsusContext : DbContext
{
    public infsusContext(DbContextOptions<infsusContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Korisnik> Korisnik { get; set; }

    public virtual DbSet<Mjesto> Mjesto { get; set; }

    public virtual DbSet<Obrok> Obrok { get; set; }

    public virtual DbSet<Putovanje> Putovanje { get; set; }

    public virtual DbSet<Rezervacija> Rezervacija { get; set; }

    public virtual DbSet<Smjestaj> Smjestaj { get; set; }

    public virtual DbSet<Soba> Soba { get; set; }

    public virtual DbSet<Vozilo> Vozilo { get; set; }

    public virtual DbSet<VrstaPutovanja> VrstaPutovanja { get; set; }

    public virtual DbSet<VrstaSmjestaja> VrstaSmjestaja { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Korisnik>(entity =>
        {
            entity.HasKey(e => e.IdKorisnik);

            entity.ToTable("korisnik");

            entity.Property(e => e.IdKorisnik).HasColumnName("idKorisnik");
            entity.Property(e => e.Admin).HasColumnName("admin");
            entity.Property(e => e.BrojMobitela).HasColumnName("brojMobitela");
            entity.Property(e => e.DatumRodenja)
                .HasColumnType("date")
                .HasColumnName("datumRodenja");
            entity.Property(e => e.Email)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.IdMjesto).HasColumnName("idMjesto");
            entity.Property(e => e.Ime)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("ime");
            entity.Property(e => e.KorisnickoIme)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("korisnickoIme");
            entity.Property(e => e.Lozinka)
                .IsRequired()
                .HasColumnName("lozinka");
            entity.Property(e => e.Prezime)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("prezime");

            entity.HasOne(d => d.IdMjestoNavigation).WithMany(p => p.Korisniks)
                .HasForeignKey(d => d.IdMjesto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_korisnik_mjesto");
        });

        modelBuilder.Entity<Mjesto>(entity =>
        {
            entity.HasKey(e => e.IdMjesto);

            entity.ToTable("mjesto");

            entity.Property(e => e.IdMjesto).HasColumnName("idMjesto");
            entity.Property(e => e.Naziv)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("naziv");
            entity.Property(e => e.Postanskibroj).HasColumnName("postanskibroj");
        });

        modelBuilder.Entity<Obrok>(entity =>
        {
            entity.HasKey(e => e.IdObroka);

            entity.ToTable("obrok");

            entity.Property(e => e.IdObroka).HasColumnName("idObroka");
            entity.Property(e => e.VrstaObroka)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("vrstaObroka");
        });

        modelBuilder.Entity<Putovanje>(entity =>
        {
            entity.HasKey(e => e.IdPutovanja);

            entity.ToTable("putovanje");

            entity.Property(e => e.IdPutovanja).HasColumnName("idPutovanja");
            entity.Property(e => e.Cijena).HasColumnName("cijena");
            entity.Property(e => e.DatumPolaska)
                .HasColumnType("date")
                .HasColumnName("datumPolaska");
            entity.Property(e => e.DatumPovratka)
                .HasColumnType("date")
                .HasColumnName("datumPovratka");
            entity.Property(e => e.IdMjesto).HasColumnName("idMjesto");
            entity.Property(e => e.IdSmjestaj).HasColumnName("idSmjestaj");
            entity.Property(e => e.IdVozilo).HasColumnName("idVozilo");
            entity.Property(e => e.IdVrstaPutovanja).HasColumnName("idVrstaPutovanja");
            entity.Property(e => e.ImeprezimeVoditelj)
                .HasMaxLength(50)
                .HasColumnName("imeprezimeVoditelj");
            entity.Property(e => e.Opis)
                .IsRequired()
                .HasColumnName("opis");
            entity.Property(e => e.Rate)
                .IsRequired()
                .HasMaxLength(2)
                .IsFixedLength()
                .HasColumnName("rate");
            entity.Property(e => e.Slika).HasColumnName("slika");

            entity.HasOne(d => d.IdMjestoNavigation).WithMany(p => p.Putovanjes)
                .HasForeignKey(d => d.IdMjesto)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_putovanje_mjesto");

            entity.HasOne(d => d.IdSmjestajNavigation).WithMany(p => p.Putovanjes)
                .HasForeignKey(d => d.IdSmjestaj)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_putovanje_smjestaj");

            entity.HasOne(d => d.IdVoziloNavigation).WithMany(p => p.Putovanjes)
                .HasForeignKey(d => d.IdVozilo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_putovanje_vozilo");

            entity.HasOne(d => d.IdVrstaPutovanjaNavigation).WithMany(p => p.Putovanjes)
                .HasForeignKey(d => d.IdVrstaPutovanja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_putovanje_vrstaPutovanja");
        });

        modelBuilder.Entity<Rezervacija>(entity =>
        {
            entity.HasKey(e => e.IdRezervacija);

            entity.ToTable("rezervacija");

            entity.Property(e => e.IdRezervacija).HasColumnName("idRezervacija");
            entity.Property(e => e.BrojMjesta).HasColumnName("brojMjesta");
            entity.Property(e => e.DatumRezervacije)
                .HasColumnType("date")
                .HasColumnName("datumRezervacije");
            entity.Property(e => e.IdKorisnik).HasColumnName("idKorisnik");
            entity.Property(e => e.IdPutovanje).HasColumnName("idPutovanje");
            entity.Property(e => e.Potvrdeno).HasColumnName("potvrdeno");

            entity.HasOne(d => d.IdKorisnikNavigation).WithMany(p => p.Rezervacijas)
                .HasForeignKey(d => d.IdKorisnik)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rezervacija_korisnik");

            entity.HasOne(d => d.IdPutovanjeNavigation).WithMany(p => p.Rezervacijas)
                .HasForeignKey(d => d.IdPutovanje)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_rezervacija_putovanje");
        });

        modelBuilder.Entity<Smjestaj>(entity =>
        {
            entity.HasKey(e => e.IdSmjestaj);

            entity.ToTable("smjestaj");

            entity.Property(e => e.IdSmjestaj).HasColumnName("idSmjestaj");
            entity.Property(e => e.IdObrok).HasColumnName("idObrok");
            entity.Property(e => e.IdSoba).HasColumnName("idSoba");
            entity.Property(e => e.IdVrstaSmjestaja).HasColumnName("idVrstaSmjestaja");
            entity.Property(e => e.Naziv)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("naziv");

            entity.HasOne(d => d.IdObrokNavigation).WithMany(p => p.Smjestajs)
                .HasForeignKey(d => d.IdObrok)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_smjestaj_obrok");

            entity.HasOne(d => d.IdSobaNavigation).WithMany(p => p.Smjestajs)
                .HasForeignKey(d => d.IdSoba)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_smjestaj_soba");

            entity.HasOne(d => d.IdVrstaSmjestajaNavigation).WithMany(p => p.Smjestajs)
                .HasForeignKey(d => d.IdVrstaSmjestaja)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_smjestaj_vrstaSmjestaja");
        });

        modelBuilder.Entity<Soba>(entity =>
        {
            entity.HasKey(e => e.IdSobe).HasName("PK_Table_1_1");

            entity.ToTable("soba");

            entity.Property(e => e.IdSobe).HasColumnName("idSobe");
            entity.Property(e => e.VrstaSobe)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("vrstaSobe");
        });

        modelBuilder.Entity<Vozilo>(entity =>
        {
            entity.HasKey(e => e.IdVozila).HasName("PK_Table_1");

            entity.ToTable("vozilo");

            entity.Property(e => e.IdVozila).HasColumnName("idVozila");
            entity.Property(e => e.VrstaVozila)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("vrstaVozila");
        });

        modelBuilder.Entity<VrstaPutovanja>(entity =>
        {
            entity.HasKey(e => e.IdVrste);

            entity.ToTable("vrstaPutovanja");

            entity.Property(e => e.IdVrste).HasColumnName("idVrste");
            entity.Property(e => e.NazivVrstePut)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nazivVrstePut");
        });

        modelBuilder.Entity<VrstaSmjestaja>(entity =>
        {
            entity.HasKey(e => e.IdVrstaSmjestaja);

            entity.ToTable("vrstaSmjestaja");

            entity.Property(e => e.IdVrstaSmjestaja).HasColumnName("idVrstaSmjestaja");
            entity.Property(e => e.VrstaSmjestaja1)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("vrstaSmjestaja");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}